@page "/"
@using CQRS.Mediatr.Lite
@using Events.Commands
@using Events.Commands.CreateEntity
@using Events.Queries
@using ModelInterface.Factories
@using ModelInterface.Interface;
@using ModelInterface.Interface.Aggregates
@using ModelInterface.Interface.Elements

@inject ICommandBus CommandBus
@inject IQueryService QueryService

<MudGrid Class="ma-6" Justify="Justify.SpaceAround">
    <MudItem xs="5" Class="dflex">
        <MudGrid>

            <MudItem xs="12">
                <MudSelect @bind-Value="selectedProduct" Label="Select a product" Placeholder="Please Select">
                    @if (products is not null)
                        foreach (IProduct product in products)
                        {
                            <MudSelectItem Value="@product">@product.Name</MudSelectItem>
                        }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="12">
                        <MudNumericField @bind-Value="selectedQuantity" Label="Quantity" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudNumericField @bind-Value="selectedPrice" Label="TotalPrice billed" Variant="Variant.Outlined" Step=".2M" />
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12">
                <MudButton OnClick="AssignOrderPositionCallback" Variant="Variant.Filled">Assign</MudButton>
            </MudItem>
            <MudItem xs="12">
                <OrderPositionTable OrderPositions="orderPositions" />
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="5">
        <MudGrid>

            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" OnClick="OrderCallback">Process to  Order</MudButton>
            </MudItem>
            <MudItem xs="12">
                @{
                    if (orders is not null)
                        foreach (var order in orders)
                        {
                            <MudCard>
                                <MudCardContent>
                                    <MudText>Order: @order.Id</MudText>
                                    <MudText>Amount: @order.GetTotalPrice()</MudText>
                                </MudCardContent>
                            </MudCard>
                            <OrderPositionTable OrderPositions="@order.Positions" />
                        }
                }
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>
@code {
    IProduct? selectedProduct = null;
    Decimal selectedPrice;
    int selectedQuantity;

    IEnumerable<IProduct>? products = null;
    IEnumerable<IOrder>? orders = null;
    List<IOrderPosition> orderPositions = new();
    Dictionary<Guid, string> ProductIdName = new();
    Dictionary<Guid, decimal> ProductIdPrice = new();
    EventCallback<MouseEventArgs> OrderCallback => new(null, Order);

    async Task Order(MouseEventArgs args)
    {
        if (orderPositions.Any())
        {
            var positions = new IOrderPosition[orderPositions.Count];
            orderPositions.CopyTo(positions);

            EntityCreateCommand<IOrder> orderCmd = new(positions);
            var result = await CommandBus.Send(orderCmd).ContinueWith(async t =>
            {
                orderPositions.Clear();
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        List<string>
        names = new List<string>
        () { "Round", "Square", "Rectangle" };
        List<string>
        descriptions = new List<string>
        () { "Italian", "American", "German" };
        List<int>
        discounts = new List<int>
        () { 10, 15, 13 };
        List<decimal>
        prices = new List<decimal>
        () { 12, 88m, 13m };
        Random random = new();

        if (firstRender)
        {
            for (int i = 0; i < names.Count(); i++)
            {
                EntityCreateCommand<IProduct>
                productCmd = new(productName: names[i], productDescription: descriptions[i], prices[i]);
                var result = await CommandBus.Send(productCmd);
            }

            await Refresh().ContinueWith(async t =>
            {
                if (products is not null)
                {
                    products.ToList().ForEach(p => ProductIdName.Add(p.Id.Value, p.Name));
                    products.ToList().ForEach(p => ProductIdPrice.Add(p.Id.Value, p.Price.Value));
                }
                await InvokeAsync(StateHasChanged);
            });

        }
    }

    async Task Refresh()
    {
        var queryProducts = new GetAllQuery<IProduct>();
        products = await QueryService.Query(queryProducts);

        var queryOrders = new GetAllQuery<IOrder>();
        orders = await QueryService.Query(queryOrders);
    }
}
