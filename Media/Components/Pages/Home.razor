@page "/"
@using CQRS.Mediatr.Lite
@using Events.Commands
@using Events.Commands.CreateEntity
@using Events.Queries
@using ModelInterface.Factories
@using ModelInterface.Interface;
@using ModelInterface.Interface.Aggregates
@using ModelInterface.Interface.Elements

@inject ICommandBus CommandBus
@inject IQueryService QueryService

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@code {
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        EntityCreateCommand<IProduct> productCmd = new(productName: "productName", productDescription: "productDescription", productPrice: 100);
        IdCommandResult result = CommandBus.Send(productCmd).Result;

        GetAllQuery<IProduct> query = new();
        IEnumerable<IProduct> products = await QueryService.Query(query);

        Console.WriteLine($"Any?: {products.Any()}");
        Random random = new();
        if (products is not null && products.Any())
        {
            var product = products.First();
            List<IOrderPosition> orderPositions = new();
            for (int i = 0; i < 10; i++)
                orderPositions.Add(OrderPositionFactory.Create(productId: product.Id, quantity: random.Next(1, 100), totalPrice: 10m, discount: random.Next(0, 50)));

            EntityCreateCommand<IOrder> orderCmd = new(orderPositions);
            result = CommandBus.Send(orderCmd).Result;
            GetAllQuery<IOrder> queryOrder = new();
            IEnumerable<IOrder> orders = await QueryService.Query(queryOrder);
            var p = orders.First().GetTotalPrice();
        }
    }
}